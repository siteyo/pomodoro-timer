{"version":3,"sources":["components/TextFieldComponent.tsx","components/TimerComponent.tsx","containers/TimerContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","textField","marginLeft","marginRight","width","display","TextFieldComponent","handleChange","targetName","label","disabled","value","classes","TextField","className","type","onChange","event","Number","target","defaultValue","card","minWidth","number","fontSize","textAlign","numberContainer","justifyContent","textfieldContainer","TimerComponent","timeLeft","count","active","start","stop","reset","inputValues","Card","CardContent","Typography","Math","floor","slice","workMinutes","intervalMinutes","repeatCountMax","CardActions","Button","onClick","useTimer","useState","setInputValues","setTimeLeft","repeatCount","setRepeatCount","timerId","setTimerId","isWorkTime","setIsWorkTime","setActive","tick","prevTime","useEffect","clearInterval","prev","prevCount","setInterval","newValue","v","TimerContainer","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed9e277a.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/styles';\n\ninterface TextFieldProps {\n  handleChange: (targetName: string, newValue: number) => void;\n  targetName: string;\n  label: string;\n  disabled: boolean;\n  value?: number;\n}\n\nconst useStyles = makeStyles({\n  textField: {\n    marginLeft: 10,\n    marginRight: 10,\n    width: 200,\n    display: 'block',\n  },\n});\n\nconst TextFieldComponent: FC<TextFieldProps> = ({\n  handleChange,\n  targetName,\n  label,\n  disabled,\n  value = 0,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <TextField\n      className={classes.textField}\n      label={label}\n      type=\"number\"\n      disabled={disabled}\n      onChange={event => handleChange(targetName, Number(event.target.value))}\n      defaultValue={value}\n    />\n  );\n};\n\nexport default TextFieldComponent;\n","import React, { FC } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nimport TextFieldComponent from 'components/TextFieldComponent';\n\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 300,\n  },\n  number: {\n    fontSize: 40,\n    textAlign: 'center',\n    display: 'flex',\n  },\n  numberContainer: {\n    display: 'flex',\n    justifyContent: 'space-around',\n  },\n  textfieldContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n});\n\ninterface TimerProps {\n  timeLeft: number;\n  count: number;\n  active: boolean;\n  start: () => void;\n  stop: () => void;\n  reset: () => void;\n  inputValues: {\n    workMinutes: number;\n    intervalMinutes: number;\n    repeatCountMax: number;\n  };\n  handleChange: (targetName: string, newValue: number) => void;\n}\n\nconst TimerComponent: FC<TimerProps> = ({\n  timeLeft,\n  count,\n  active,\n  start,\n  stop,\n  reset,\n  inputValues,\n  handleChange,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Card className={classes.card}>\n        <CardContent>\n          <div className={classes.numberContainer}>\n            Time\n            <Typography className={classes.number}>\n              {Math.floor(timeLeft / 60)}:{('00' + (timeLeft % 60)).slice(-2)}\n            </Typography>\n            repeat\n            <Typography className={classes.number}>{count}</Typography>\n          </div>\n          <div className={classes.textfieldContainer}>\n            <TextFieldComponent\n              handleChange={handleChange}\n              targetName=\"workMinutes\"\n              label=\"Work [min]\"\n              disabled={active}\n              value={inputValues.workMinutes}\n            />\n            <TextFieldComponent\n              handleChange={handleChange}\n              targetName=\"intervalMinutes\"\n              label=\"Interval [min]\"\n              disabled={active}\n              value={inputValues.intervalMinutes}\n            />\n            <TextFieldComponent\n              handleChange={handleChange}\n              targetName=\"repeatCount\"\n              label=\"Repeat\"\n              disabled={active}\n              value={inputValues.repeatCountMax}\n            />\n          </div>\n        </CardContent>\n        <CardActions>\n          <Button onClick={start}>Start</Button>\n          <Button onClick={stop}>Stop</Button>\n          <Button onClick={reset} disabled={active}>\n            Reset\n          </Button>\n        </CardActions>\n      </Card>\n    </>\n  );\n};\n\nexport default TimerComponent;\n","import React, { FC, useEffect, useState } from 'react';\n\nimport TimerComponent from 'components/TimerComponent';\n\nconst useTimer = (\n  workMinutes: number,\n  intervalMinutes: number,\n  repeatCountMax: number,\n): [\n  number,\n  boolean,\n  number,\n  () => void,\n  () => void,\n  () => void,\n  { workMinutes: number; intervalMinutes: number; repeatCountMax: number },\n  (targetName: string, newValue: number) => void,\n] => {\n  const [inputValues, setInputValues] = useState({\n    workMinutes: workMinutes,\n    intervalMinutes: intervalMinutes,\n    repeatCountMax: repeatCountMax,\n  });\n  const [timeLeft, setTimeLeft] = useState(workMinutes * 60);\n  const [repeatCount, setRepeatCount] = useState(0);\n  const [timerId, setTimerId] = useState();\n  const [isWorkTime, setIsWorkTime] = useState(true);\n  const [active, setActive] = useState(false);\n\n  const tick = () => {\n    setTimeLeft(prevTime => prevTime - 1);\n  };\n\n  const start = () => {\n    if (!active) {\n      setTimerId(setInterval(tick, 1000));\n      setActive(true);\n    }\n  };\n\n  const stop = () => {\n    if (active) {\n      clearInterval(timerId);\n      setActive(false);\n    }\n  };\n\n  const reset = () => {\n    if (active) {\n      clearInterval(timerId);\n    }\n    setTimeLeft(inputValues.workMinutes * 60);\n    setIsWorkTime(true);\n    setRepeatCount(0);\n  };\n\n  const handleChange = (targetName: string, newValue: number) => {\n    setInputValues(v => ({ ...v, [targetName]: newValue }));\n  };\n\n  useEffect(() => {\n    return () => clearInterval(timerId);\n  }, [timerId]);\n\n  useEffect(() => {\n    setTimeLeft(inputValues.workMinutes * 60);\n    setIsWorkTime(true);\n    setRepeatCount(0);\n    setActive(false);\n  }, [inputValues]);\n\n  useEffect(() => {\n    if (active && timeLeft === 0) {\n      setIsWorkTime(prev => !prev);\n    }\n  }, [timeLeft, active]);\n\n  useEffect(() => {\n    if (active) {\n      if (isWorkTime) {\n        setRepeatCount(prevCount => prevCount + 1);\n        setTimeLeft(inputValues.workMinutes * 60);\n      } else {\n        setTimeLeft(inputValues.intervalMinutes * 60);\n      }\n    }\n  }, [isWorkTime]); //eslint-disable-line\n\n  return [\n    timeLeft,\n    active,\n    repeatCount,\n    start,\n    stop,\n    reset,\n    inputValues,\n    handleChange,\n  ];\n};\n\nconst TimerContainer: FC = () => {\n  const WORK_MINUTES = 25;\n  const INTERVAL_MINUTES = 5;\n  const REPEAT = 4;\n\n  const [\n    timeLeft,\n    active,\n    repeatCount,\n    start,\n    stop,\n    reset,\n    inputValues,\n    handleChange,\n  ] = useTimer(WORK_MINUTES, INTERVAL_MINUTES, REPEAT);\n\n  return (\n    <TimerComponent\n      timeLeft={timeLeft}\n      count={repeatCount}\n      active={active}\n      start={start}\n      stop={stop}\n      reset={reset}\n      inputValues={inputValues}\n      handleChange={handleChange}\n    />\n  );\n};\n\nexport default TimerContainer;\n","import React from 'react';\nimport Timer from 'containers/TimerContainer';\n\nimport Container from '@material-ui/core/Container';\n\nconst App: React.FC = () => {\n  return (\n    <Container maxWidth=\"sm\">\n      <header>\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <Timer />\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}