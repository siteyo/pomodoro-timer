{"version":3,"sources":["components/TimerComponent.tsx","containers/TimerContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","card","minWidth","time","fontSize","textAlign","TimerComponent","timeLeft","reset","classes","Card","className","CardContent","Typography","Math","floor","slice","CardActions","Button","onClick","TimerContainer","limitSec","useState","setTimeLeft","tick","prevTime","useEffect","timerId","setInterval","clearInterval","useTimer","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAUMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,KAAM,CACJC,SAAU,GACVC,UAAW,YA6BAC,EAnBwB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC5CC,EAAUV,IAEhB,OACE,oCACE,kBAACW,EAAA,EAAD,CAAMC,UAAWF,EAAQR,MACvB,kBAACW,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYF,UAAWF,EAAQN,MAC5BW,KAAKC,MAAMR,EAAW,IADzB,KACgC,KAAQA,EAAW,IAAKS,OAAO,KAGjE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAASX,GAAjB,aCNKY,EAPY,WACzB,IAD+B,EArBhB,SAACC,GAA4C,IAAD,EAC3BC,mBAASD,GADkB,mBACpDd,EADoD,KAC1CgB,EAD0C,KAOrDC,EAAO,WACXD,GAAY,SAAAE,GAAQ,OAAkB,IAAbA,EAAiBJ,EAAWI,EAAW,MAUlE,OAPAC,qBAAU,WACR,IAAMC,EAAUC,YAAYJ,EAAM,KAElC,OAAO,kBAAMK,cAAcF,MAE1B,IAEI,CAACpB,EAfM,WACZgB,EAAYF,KAmBYS,CADZ,KADiB,mBAExBvB,EAFwB,KAEdC,EAFc,KAI/B,OAAO,kBAAC,EAAD,CAAgBD,SAAUA,EAAUC,MAAOA,K,QCbrCuB,EAXO,WACpB,OACE,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,gCACE,+CAEF,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0f33283f.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 300,\n  },\n  time: {\n    fontSize: 40,\n    textAlign: 'center',\n  },\n});\n\ninterface TimerProps {\n  timeLeft: number;\n  /* pause: () => void; */\n  reset: () => void;\n}\n\nconst TimerComponent: FC<TimerProps> = ({ timeLeft, reset }) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography className={classes.time}>\n            {Math.floor(timeLeft / 60)}:{('00' + (timeLeft % 60)).slice(-2)}\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button onClick={reset}>Reset</Button>\n        </CardActions>\n      </Card>\n    </>\n  );\n};\n\nexport default TimerComponent;\n","import React, { FC, useEffect, useState } from 'react';\n\nimport TimerComponent from 'components/TimerComponent';\n\nconst useTimer = (limitSec: number): [number, () => void] => {\n  const [timeLeft, setTimeLeft] = useState(limitSec);\n\n  const reset = () => {\n    setTimeLeft(limitSec);\n  };\n\n  const tick = () => {\n    setTimeLeft(prevTime => (prevTime === 0 ? limitSec : prevTime - 1));\n  };\n\n  useEffect(() => {\n    const timerId = setInterval(tick, 1000);\n\n    return () => clearInterval(timerId);\n    // eslint-disable-next-line\n  }, []);\n\n  return [timeLeft, reset];\n};\n\nconst TimerContainer: FC = () => {\n  const LIMIT = 60 * 12;\n  const [timeLeft, reset] = useTimer(LIMIT);\n\n  return <TimerComponent timeLeft={timeLeft} reset={reset} />;\n};\n\nexport default TimerContainer;\n","import React from 'react';\nimport Timer from 'containers/TimerContainer';\n\nimport Container from '@material-ui/core/Container';\n\nconst App: React.FC = () => {\n  return (\n    <Container maxWidth=\"sm\">\n      <header>\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <Timer />\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}